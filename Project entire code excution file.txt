#import libraries
import glob 
from keras.models import Sequential,load_model
import numpy as np
import pandas as pd
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
import matplotlib.pyplot as plt
import keras as k
from google.colab import files
uploaded = files.upload()
df = pd.read_csv('chronic kidney.csv')
df.head(6)
columns_to_retain = ['sg','al','sc','hemo','pcv','wbcc','rbcc','htn','classification']
df = df.drop( [col for col in df.columns if not col in columns_to_retain] , axis=1 )
df = df.dropna(axis=0)
for column in df.columns:
    if df[column].dtype == np.number:
      continue
    df[column] = LabelEncoder().fit_transform(df[column])
df.head()
x = df.drop(['classification'],axis=1) 
y = df['classification']
x_scaler = MinMaxScaler()
x_scaler.fit(x)
column_names = x.columns
x[column_names] = x_scaler.transform(x)
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,shuffle=True)
model = Sequential()
model.add( Dense(256, input_dim= len(x.columns), kernel_initializer=k.initializers.random_normal(seed=13), activation='relu'))
model.add( Dense(1, activation='hard_sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics['accuracy'])
history = model.fit(x_train,y_train,epochs=2000,batch_size= x_train.shape[0])
model.save('ckd.model')
plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])
plt.title('model accuracy & loss')
plt.ylabel('accuracy and loss')
plt.xlabel('epoch')
print('shape of traning data:',x_train.shape)
print('shape of test data:',x_test.shape)
pred = model.predict(x_test)
pred = [1 if y>=0.5 else 0 for y in pred]
pred
print('Original : {0}'.format(", ".join(str(x) for x in y_test)))
print('Predicted :{0}'.format(", ".join(str(x) for x in pred )))
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
knn = KNeighborsClassifier()
knn.fit(x_train, y_train)
knn_acc = accuracy_score(y_test, knn.predict(x_test))
print(f"Training Accuracy of KNN is {accuracy_score(y_train, knn.predict(x_train))}")
print(f"Test Accuracy of KNN is {knn_acc} \n")
print(f"Confusion Matrix :- \n{confusion_matrix(y_test, knn.predict(x_test))}\n")
print(f"Classification Report :- \n {classification_report(y_test, knn.predict(x_test))}")
from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
dtc.fit(x_train, y_train)
# accuracy score, confusion matrix and classification report of decision tree
dtc_acc = accuracy_score(y_test, dtc.predict(x_test))
print(f"Training Accuracy of Decision Tree Classifier is {accuracy_score(y_train, dtc.predict(x_train))}")
print(f"Test Accuracy of Decision Tree Classifier is {dtc_acc} \n")
print(f"Confusion Matrix :- \n{confusion_matrix(y_test, dtc.predict(x_test))}\n")
print(f"Classification Report :- \n {classification_report(y_test, dtc.predict(x_test))}")
from sklearn.ensemble import RandomForestClassifier
rd_clf = RandomForestClassifier(criterion = 'entropy', max_depth = 11, max_features = 'auto', min_samples_leaf = 2, min_samples_split = 3, n_estimators = 130)
rd_clf.fit(x_train,y_train)
# accuracy score, confusion matrix and classification report of random forest
rd_clf_acc =accuracy_score(y_test, rd_clf.predict(x_test))
print(f"Training Accuracy of Random Forest Classifier is {accuracy_score(y_train, rd_clf.predict(x_train))}")
print(f"Test Accuracy of Random Forest Classifier is {rd_clf_acc}Â \n")
models = pd.DataFrame({
    'model' : ['KNN',' Decision Tree Classifier', 'RandomForestClassifier'],
    'score' : [knn_acc,dtc_acc,rd_clf_acc]}
)
models.sort_values(by = 'score',ascending = False)
y_test